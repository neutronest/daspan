/*
 * Copyright (c) 2018.
 */
package com.framex.core

import scalaz.{Coyoneda, _}

//object Foo {
//  type ISB = Int :+: String :+: Boolean :+: CNil
//
//}

sealed trait TField[A]
case object TFNone
case class IntField(x: Int) extends TField[Int]
case class DoubleField(x: Double) extends TField[Double]
case class StringField(x: String) extends TField[String]

object TField {
  type CoyoTField[A] = Coyoneda[TField, A]
  /** A free monad over the free functor generated by `S` */
//  type FreeC[S[_], A] = Free[({type f[x] = Coyoneda[S, x]})#f, A]
//  type FreeTField[A] = FreeC[TField, A]
//
//
//  def liftFC[S[_], A](s: S[A]): FreeC[S, A] =
//    Free.liftF(Coyoneda lift s)
}

